import pandas as pd
import mysql.connector
import os

# List of CSV files and their corresponding table names
csv_files = [
    ('customers.csv', 'customers'),
    ('orders.csv', 'orders'),
    ('sallers.csv', 'sallers'),
    ('products.csv', 'products'),
    ('geolocation.csv', 'geolocation'),
    ('payments.csv', 'payments'),
    ('order_items.csv', 'order_items')  # <-- FIXED
]

# Connect to the MySQL database
conn = mysql.connector.connect(
    host='localhost',
    user='root',
    password='1234.',
    database='Ecommerce'
)
cursor = conn.cursor()

# Folder containing the CSV files
folder_path = r'C:\Users\nothing\OneDrive\Desktop\Ecommerce project'  # raw string recommended

def get_sql_type(dtype):
    if pd.api.types.is_integer_dtype(dtype):
        return 'INT'
    elif pd.api.types.is_float_dtype(dtype):
        return 'FLOAT'
    elif pd.api.types.is_bool_dtype(dtype):
        return 'BOOLEAN'
    elif pd.api.types.is_datetime64_any_dtype(dtype):
        return 'DATETIME'
    else:
        return 'TEXT'

for csv_file, table_name in csv_files:
    file_path = os.path.join(folder_path, csv_file.strip())
    print(f"\n==> Processing file: {file_path}")
    
    try:
        # Read the CSV file into a pandas DataFrame
        df = pd.read_csv(file_path)

        # Replace NaN with None to handle SQL NULL
        df = df.where(pd.notnull(df), None)

        # Clean column names
        df.columns = [col.strip().replace(' ', '_').replace('-', '_').replace('.', '_') for col in df.columns]

        # Generate the CREATE TABLE statement
        columns = ', '.join([f'`{col}` {get_sql_type(df[col].dtype)}' for col in df.columns])
        create_table_query = f'CREATE TABLE IF NOT EXISTS `{table_name}` ({columns})'
        cursor.execute(create_table_query)
        print(f"Created table `{table_name}`")

        # Insert DataFrame data into the MySQL table
        for idx, row in df.iterrows():
            values = tuple(None if pd.isna(x) else x for x in row)
            sql = f"INSERT INTO `{table_name}` ({', '.join(['`' + col + '`' for col in df.columns])}) VALUES ({', '.join(['%s'] * len(row))})"
            try:
                cursor.execute(sql, values)
            except Exception as e:
                print(f"Error inserting row {idx}: {e}")

        # Commit after each file
        conn.commit()
        print(f"Inserted {len(df)} rows into `{table_name}`")

    except Exception as e:
        print(f"Failed to process {csv_file}: {e}")

# Close the connection
cursor.close()
conn.close()
print("\n=== All Done ===")
